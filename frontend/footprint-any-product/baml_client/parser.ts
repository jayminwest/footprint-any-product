/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Collector } from "@boundaryml/baml"
import { toBamlError } from "@boundaryml/baml"
import type { Checked, Check } from "./types.js"
import type { partial_types } from "./partial_types.js"
import type * as types from "./types.js"
import type {ComponentsBreakdown, EndOfLifeAgentOutput, EnergyConsumption, FootprintContribution, LifecycleAgentOutput, ManufacturingAgentOutput, ManufacturingLocation, MaterialInfo, MaterialsAgentOutput, PackagingAgentOutput, PackagingMaterial, RecyclabilityInfo, Repairability, ShippingRoute, SummaryAgentOutput, TotalCarbonFootprint, TransportAgentOutput} from "./types.js"
import type TypeBuilder from "./type_builder.js"

export class LlmResponseParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  EndOfLifeAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): EndOfLifeAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "EndOfLifeAgent",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as EndOfLifeAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  LifecycleAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): LifecycleAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "LifecycleAgent",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as LifecycleAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ManufacturingAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ManufacturingAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "ManufacturingAgent",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as ManufacturingAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MaterialsAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): MaterialsAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "MaterialsAgent",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as MaterialsAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  PackagingAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): PackagingAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "PackagingAgent",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as PackagingAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SummaryAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): SummaryAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "SummaryAgent",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as SummaryAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  TransportAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): TransportAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "TransportAgent",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as TransportAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class LlmStreamParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  EndOfLifeAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.EndOfLifeAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "EndOfLifeAgent",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.EndOfLifeAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  LifecycleAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.LifecycleAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "LifecycleAgent",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.LifecycleAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ManufacturingAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.ManufacturingAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "ManufacturingAgent",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.ManufacturingAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MaterialsAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.MaterialsAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "MaterialsAgent",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.MaterialsAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  PackagingAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.PackagingAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "PackagingAgent",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.PackagingAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SummaryAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.SummaryAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "SummaryAgent",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.SummaryAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  TransportAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.TransportAgentOutput {
    try {
      return this.runtime.parseLlmResponse(
        "TransportAgent",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.TransportAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}