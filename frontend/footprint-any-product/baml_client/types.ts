/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}


export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface ComponentsBreakdown {
  highlyRecyclable: string[]
  hardToRecycle: string[]
  
}

export interface EndOfLifeAgentOutput {
  details: string
  carbonScore: number
  recyclability: RecyclabilityInfo
  commonDisposalMethods: Record<string, string>
  
}

export interface EnergyConsumption {
  average: string
  annualUsage: string
  totalLifetimeEnergy: string
  averageLifetimeEmissions: string
  
}

export interface FootprintContribution {
  score: number
  contribution: string
  
}

export interface LifecycleAgentOutput {
  details: string
  carbonScore: number
  expectedLifespan: string
  energyConsumption: EnergyConsumption
  repairability: Repairability
  
}

export interface ManufacturingAgentOutput {
  details: string
  carbonScore: number
  manufacturingLocations: ManufacturingLocation[]
  
}

export interface ManufacturingLocation {
  country: string
  city: string
  facilityType: string
  energySources: string[]
  emissions: string
  certifications: string[]
  
}

export interface MaterialInfo {
  name: string
  percentage: number
  carbonIntensity: string
  recyclability: string
  sourceInfo: string
  
}

export interface MaterialsAgentOutput {
  details: string
  carbonScore: number
  materials: MaterialInfo[]
  totalRecyclablePercentage: number
  materialsRenewablePercentage: number
  
}

export interface PackagingAgentOutput {
  details: string
  carbonScore: number
  packagingMaterials: PackagingMaterial[]
  packagingWeight: string
  biodegradablePercentage: number
  
}

export interface PackagingMaterial {
  material: string
  percentage: number
  recyclability: string
  carbonFootprint: string
  sourceInfo: string
  
}

export interface RecyclabilityInfo {
  overallScore: string
  componentsBreakdown: ComponentsBreakdown
  
}

export interface Repairability {
  score: string
  limitations: string[]
  
}

export interface ShippingRoute {
  origin: string
  destination: string
  method: string
  distance: string
  emissionsPerUnit: string
  
}

export interface SummaryAgentOutput {
  details: string
  carbonScore: number
  totalCarbonFootprint: TotalCarbonFootprint
  keyImpactAreas: string[]
  positiveSustainabilityAspects: string[]
  consumerRecommendation: string
  sustainabilityImprovementPotential: string
  similarProductsWithBetterScores: string[]
  improvementRecommendations: string[]
  
}

export interface TotalCarbonFootprint {
  score: number
  classification: string
  breakdown: Record<string, FootprintContribution>
  comparativeRanking: string
  
}

export interface TransportAgentOutput {
  details: string
  carbonScore: number
  primaryShippingRoutes: ShippingRoute[]
  totalTransportEmissions: string
  
}
