/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, FunctionResult, BamlCtxManager, Image, Audio, ClientRegistry, Collector } from "@boundaryml/baml"
import { toBamlError, type HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types.js"
import type * as types from "./types.js"
import type {ComponentsBreakdown, EndOfLifeAgentOutput, EnergyConsumption, FootprintContribution, LifecycleAgentOutput, ManufacturingAgentOutput, ManufacturingLocation, MaterialInfo, MaterialsAgentOutput, PackagingAgentOutput, PackagingMaterial, RecyclabilityInfo, Repairability, ShippingRoute, SummaryAgentOutput, TotalCarbonFootprint, TransportAgentOutput} from "./types.js"
import type TypeBuilder from "./type_builder.js"
import { HttpRequest, HttpStreamRequest } from "./sync_request.js"
import { LlmResponseParser, LlmStreamParser } from "./parser.js"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals.js"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 * Example:
 * ```ts
 * import { RecursivePartialNull } from './baml_client/types.js'
 * ```
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>;

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
}

export class BamlSyncClient {
  private httpRequest: HttpRequest
  private httpStreamRequest: HttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager, private bamlOptions?: BamlCallOptions) {
    this.httpRequest = new HttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new HttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlSyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  /*
  * @deprecated NOT IMPLEMENTED as streaming must by async. We
  * are not providing an async version as we want to reserve the
  * right to provide a sync version in the future.
  */
  get stream() {
    throw new Error("stream is not available in BamlSyncClient. Use `import { b } from 'baml_client/async_client")
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  EndOfLifeAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): EndOfLifeAgentOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "EndOfLifeAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as EndOfLifeAgentOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  LifecycleAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): LifecycleAgentOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "LifecycleAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as LifecycleAgentOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ManufacturingAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): ManufacturingAgentOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "ManufacturingAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as ManufacturingAgentOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  MaterialsAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): MaterialsAgentOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "MaterialsAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as MaterialsAgentOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PackagingAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): PackagingAgentOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "PackagingAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as PackagingAgentOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  SummaryAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): SummaryAgentOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "SummaryAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as SummaryAgentOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TransportAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): TransportAgentOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "TransportAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as TransportAgentOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlSyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)