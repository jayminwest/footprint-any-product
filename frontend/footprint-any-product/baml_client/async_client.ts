/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, FunctionResult, BamlCtxManager, ClientRegistry, Image, Audio, Collector } from "@boundaryml/baml"
import { toBamlError, BamlStream, type HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types.js"
import type { partial_types } from "./partial_types.js"
import type * as types from "./types.js"
import type {ComponentsBreakdown, EndOfLifeAgentOutput, EnergyConsumption, FootprintContribution, LifecycleAgentOutput, ManufacturingAgentOutput, ManufacturingLocation, MaterialInfo, MaterialsAgentOutput, PackagingAgentOutput, PackagingMaterial, RecyclabilityInfo, Repairability, ShippingRoute, SummaryAgentOutput, TotalCarbonFootprint, TransportAgentOutput} from "./types.js"
import type TypeBuilder from "./type_builder.js"
import { AsyncHttpRequest, AsyncHttpStreamRequest } from "./async_request.js"
import { LlmResponseParser, LlmStreamParser } from "./parser.js"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals.js"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
}

export class BamlAsyncClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private streamClient: BamlStreamClient
  private httpRequest: AsyncHttpRequest
  private httpStreamRequest: AsyncHttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.streamClient = new BamlStreamClient(runtime, ctxManager, bamlOptions)
    this.httpRequest = new AsyncHttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new AsyncHttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlAsyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  get stream() {
    return this.streamClient
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  async EndOfLifeAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): Promise<EndOfLifeAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "EndOfLifeAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as EndOfLifeAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async LifecycleAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): Promise<LifecycleAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "LifecycleAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as LifecycleAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ManufacturingAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): Promise<ManufacturingAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "ManufacturingAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as ManufacturingAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async MaterialsAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): Promise<MaterialsAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "MaterialsAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as MaterialsAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async PackagingAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): Promise<PackagingAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "PackagingAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as PackagingAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async SummaryAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): Promise<SummaryAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "SummaryAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as SummaryAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async TransportAgent(
      productInfo: string,
      __baml_options__?: BamlCallOptions
  ): Promise<TransportAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "TransportAgent",
        {
          "productInfo": productInfo
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as TransportAgentOutput
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

class BamlStreamClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.bamlOptions = bamlOptions || {}
  }

  
  EndOfLifeAgent(
      productInfo: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<partial_types.EndOfLifeAgentOutput, EndOfLifeAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "EndOfLifeAgent",
        {
          "productInfo": productInfo
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<partial_types.EndOfLifeAgentOutput, EndOfLifeAgentOutput>(
        raw,
        (a): partial_types.EndOfLifeAgentOutput => a,
        (a): EndOfLifeAgentOutput => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  LifecycleAgent(
      productInfo: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<partial_types.LifecycleAgentOutput, LifecycleAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "LifecycleAgent",
        {
          "productInfo": productInfo
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<partial_types.LifecycleAgentOutput, LifecycleAgentOutput>(
        raw,
        (a): partial_types.LifecycleAgentOutput => a,
        (a): LifecycleAgentOutput => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ManufacturingAgent(
      productInfo: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<partial_types.ManufacturingAgentOutput, ManufacturingAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "ManufacturingAgent",
        {
          "productInfo": productInfo
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<partial_types.ManufacturingAgentOutput, ManufacturingAgentOutput>(
        raw,
        (a): partial_types.ManufacturingAgentOutput => a,
        (a): ManufacturingAgentOutput => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MaterialsAgent(
      productInfo: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<partial_types.MaterialsAgentOutput, MaterialsAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "MaterialsAgent",
        {
          "productInfo": productInfo
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<partial_types.MaterialsAgentOutput, MaterialsAgentOutput>(
        raw,
        (a): partial_types.MaterialsAgentOutput => a,
        (a): MaterialsAgentOutput => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  PackagingAgent(
      productInfo: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<partial_types.PackagingAgentOutput, PackagingAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "PackagingAgent",
        {
          "productInfo": productInfo
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<partial_types.PackagingAgentOutput, PackagingAgentOutput>(
        raw,
        (a): partial_types.PackagingAgentOutput => a,
        (a): PackagingAgentOutput => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SummaryAgent(
      productInfo: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<partial_types.SummaryAgentOutput, SummaryAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "SummaryAgent",
        {
          "productInfo": productInfo
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<partial_types.SummaryAgentOutput, SummaryAgentOutput>(
        raw,
        (a): partial_types.SummaryAgentOutput => a,
        (a): SummaryAgentOutput => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  TransportAgent(
      productInfo: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<partial_types.TransportAgentOutput, TransportAgentOutput> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "TransportAgent",
        {
          "productInfo": productInfo
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<partial_types.TransportAgentOutput, TransportAgentOutput>(
        raw,
        (a): partial_types.TransportAgentOutput => a,
        (a): TransportAgentOutput => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)