/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "agents.baml": "// Define types for each agent's output\n\n// Materials agent output\nclass MaterialsAgentOutput {\n  details string              // Detailed text about materials analysis\n  carbonScore float          // Carbon score (0-100)\n  // Materials data\n  materials MaterialInfo[]\n  totalRecyclablePercentage float\n  materialsRenewablePercentage float\n}\n\nclass MaterialInfo {\n  name string                // Material name (e.g., \"Aluminum\")\n  percentage float          // Percentage of material in product\n  carbonIntensity string     // Description of carbon intensity\n  recyclability string       // Description of recyclability\n  sourceInfo string          // Information about sourcing\n}\n\n// Manufacturing agent output\nclass ManufacturingAgentOutput {\n  details string             // Detailed text about manufacturing analysis\n  carbonScore float         // Carbon score (0-100)\n  // Manufacturing data\n  manufacturingLocations ManufacturingLocation[]\n}\n\nclass ManufacturingLocation {\n  country string\n  city string\n  facilityType string\n  energySources string[]\n  emissions string\n  certifications string[]\n}\n\n// Packaging agent output\nclass PackagingAgentOutput {\n  details string             // Detailed text about packaging analysis\n  carbonScore float         // Carbon score (0-100)\n  // Packaging data\n  packagingMaterials PackagingMaterial[]\n  packagingWeight string\n  biodegradablePercentage float\n}\n\nclass PackagingMaterial {\n  material string\n  percentage float\n  recyclability string\n  carbonFootprint string\n  sourceInfo string\n}\n\n// Transport agent output\nclass TransportAgentOutput {\n  details string             // Detailed text about transport analysis\n  carbonScore float         // Carbon score (0-100)\n  // Transport data\n  primaryShippingRoutes ShippingRoute[]\n  totalTransportEmissions string\n}\n\nclass ShippingRoute {\n  origin string\n  destination string\n  method string\n  distance string\n  emissionsPerUnit string\n}\n\n// Lifecycle agent output\nclass LifecycleAgentOutput {\n  details string             // Detailed text about lifecycle analysis\n  carbonScore float         // Carbon score (0-100)\n  // Lifecycle data\n  expectedLifespan string\n  energyConsumption EnergyConsumption\n  repairability Repairability\n}\n\nclass EnergyConsumption {\n  average string\n  annualUsage string\n  totalLifetimeEnergy string\n  averageLifetimeEmissions string\n}\n\nclass Repairability {\n  score string\n  limitations string[]\n}\n\n// End-of-life agent output\nclass EndOfLifeAgentOutput {\n  details string             // Detailed text about end-of-life analysis\n  carbonScore float         // Carbon score (0-100)\n  // End-of-life data\n  recyclability RecyclabilityInfo\n  commonDisposalMethods map<string, string>  // Method to percentage\n}\n\nclass RecyclabilityInfo {\n  overallScore string\n  componentsBreakdown ComponentsBreakdown\n}\n\nclass ComponentsBreakdown {\n  highlyRecyclable string[]\n  hardToRecycle string[]\n}\n\n// Summary agent output\nclass SummaryAgentOutput {\n  details string             // Detailed text about overall summary\n  carbonScore float         // Carbon score (0-100)\n  // Summary data\n  totalCarbonFootprint TotalCarbonFootprint\n  keyImpactAreas string[]\n  positiveSustainabilityAspects string[]\n  consumerRecommendation string\n  sustainabilityImprovementPotential string\n  similarProductsWithBetterScores string[]\n  improvementRecommendations string[]\n}\n\nclass TotalCarbonFootprint {\n  score float\n  classification string\n  breakdown map<string, FootprintContribution>\n  comparativeRanking string\n}\n\nclass FootprintContribution {\n  score float\n  contribution string\n}\n\n// Materials Agent Function\nfunction MaterialsAgent(productInfo: string) -> MaterialsAgentOutput {\n  client \"anthropic/claude-3-5-sonnet-20241022\" // Use Claude for this example\n  prompt #\"\n    You are the Materials Agent analyzing a product's material composition.\n    \n    The input could be a product name or a URL. If it's a product name, use your knowledge about \n    typical materials used in similar products to make reasonable estimates. If it's a URL, \n    analyze as if you could access the product details from that URL.\n    \n    Create a detailed analysis response with:\n    - A 2-3 sentence summary about the product's materials for the \"details\" field\n    - A carbon score between 0-100 (higher means higher environmental impact)\n    - Material breakdown with percentages, carbon intensity, recyclability, and source information\n    \n    Product information:\n    {{ productInfo }}\n\n    Respond with a structured analysis following the output format.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Manufacturing Agent Function\nfunction ManufacturingAgent(productInfo: string) -> ManufacturingAgentOutput {\n  client \"anthropic/claude-3-5-sonnet-20241022\"\n  prompt #\"\n    You are the Manufacturing Agent analyzing a product's manufacturing process.\n    \n    The input could be a product name or a URL. If it's a product name, use your knowledge about \n    typical manufacturing processes for similar products to make reasonable estimates. If it's a URL, \n    analyze as if you could access the product details from that URL.\n    \n    Create a detailed analysis response with:\n    - A 2-3 sentence summary about the product's manufacturing for the \"details\" field\n    - A carbon score between 0-100 (higher means higher environmental impact)\n    - Manufacturing locations with country, city, facility type, energy sources, emissions data, and certifications\n    \n    Product information:\n    {{ productInfo }}\n\n    Respond with a structured analysis following the output format.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Packaging Agent Function\nfunction PackagingAgent(productInfo: string) -> PackagingAgentOutput {\n  client \"anthropic/claude-3-5-sonnet-20241022\"\n  prompt #\"\n    You are the Packaging Agent analyzing a product's packaging.\n    \n    The input could be a product name or a URL. If it's a product name, use your knowledge about \n    typical packaging used for similar products to make reasonable estimates. If it's a URL, \n    analyze as if you could access the product details from that URL.\n    \n    First extract the product name or URL:\n    - If the input contains \"Product Name: [name]\", use [name] as the product\n    - If the input contains \"Product URL: [url]\", extract the product name from the URL\n    - Otherwise use the entire input as the product name\n    \n    Create a detailed analysis response with:\n    - A 2-3 sentence summary about the product's packaging for the \"details\" field, mentioning the product by name\n    - A carbon score between 0-100 (higher means higher environmental impact)\n    - Packaging materials with percentages, recyclability, carbon footprint, and source information specific to this type of product\n    - Packaging weight and biodegradable percentage\n    \n    Consider the product type in your analysis:\n    - Electronics typically use cardboard boxes, plastic films, foam padding\n    - Clothing often uses cardboard boxes or plastic bags, tissue paper, tags\n    - Furniture may use cardboard, plastic wrap, Styrofoam\n    - Food/beverages use product-specific packaging (cans, bottles, boxes, etc.)\n    \n    Product information:\n    {{ productInfo }}\n\n    Respond with a structured analysis following the output format.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Transport Agent Function\nfunction TransportAgent(productInfo: string) -> TransportAgentOutput {\n  client \"anthropic/claude-3-5-sonnet-20241022\"\n  prompt #\"\n    You are the Transport Agent analyzing a product's transportation methods.\n    \n    The input could be a product name or a URL. If it's a product name, use your knowledge about \n    typical transport methods for similar products to make reasonable estimates. If it's a URL, \n    analyze as if you could access the product details from that URL.\n    \n    First extract the product name or URL:\n    - If the input contains \"Product Name: [name]\", use [name] as the product\n    - If the input contains \"Product URL: [url]\", extract the product name from the URL\n    - Otherwise use the entire input as the product name\n    \n    Create a detailed analysis response with:\n    - A 2-3 sentence summary about the product's transport for the \"details\" field, mentioning the product by name\n    - A carbon score between 0-100 (higher means higher environmental impact)\n    - Primary shipping routes with origin, destination, method, distance, and emissions data specific to this type of product\n    - Total transport emissions\n    \n    Consider the product type in your analysis:\n    - Electronics often ship from Asia (China, Taiwan, South Korea) to global markets via sea freight and then regional distribution\n    - Clothing may come from Southeast Asia (Bangladesh, Vietnam, Cambodia) factories\n    - Furniture might ship from manufacturing centers in Europe, North America or Asia\n    - Food products often have regional processing and distribution networks\n    \n    Product information:\n    {{ productInfo }}\n\n    Respond with a structured analysis following the output format.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Lifecycle Agent Function\nfunction LifecycleAgent(productInfo: string) -> LifecycleAgentOutput {\n  client \"anthropic/claude-3-5-sonnet-20241022\"\n  prompt #\"\n    You are the Lifecycle Use Agent analyzing a product's usage lifecycle.\n    \n    The input could be a product name or a URL. If it's a product name, use your knowledge about \n    typical usage patterns and energy consumption for similar products to make reasonable estimates. If it's a URL, \n    analyze as if you could access the product details from that URL.\n    \n    First extract the product name or URL:\n    - If the input contains \"Product Name: [name]\", use [name] as the product\n    - If the input contains \"Product URL: [url]\", extract the product name from the URL\n    - Otherwise use the entire input as the product name\n    \n    Create a detailed analysis response with:\n    - A 2-3 sentence summary about the product's lifecycle use for the \"details\" field, mentioning the product by name\n    - A carbon score between 0-100 (higher means higher environmental impact)\n    - Expected lifespan specific to this type of product\n    - Energy consumption details including average power use, annual usage, lifetime energy, and emissions\n    - Repairability assessment with score and limitations specific to this product type\n    \n    Consider the product type in your analysis:\n    - Electronics (like laptops, phones) typically have 3-5 year lifespans, moderate to high energy use, and limited repairability\n    - Clothing items vary based on quality, wear frequency, and fashion trends\n    - Furniture often has long lifespans (10+ years) with little to no energy use\n    - Food/beverages have short lifespans with refrigeration or heating energy impacts\n    \n    Product information:\n    {{ productInfo }}\n\n    Respond with a structured analysis following the output format.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// End-of-Life Agent Function\nfunction EndOfLifeAgent(productInfo: string) -> EndOfLifeAgentOutput {\n  client \"anthropic/claude-3-5-sonnet-20241022\"\n  prompt #\"\n    You are the End-of-Life Agent analyzing a product's disposal and recycling options.\n    \n    The input could be a product name or a URL. If it's a product name, use your knowledge about \n    typical end-of-life handling for similar products to make reasonable estimates. If it's a URL, \n    analyze as if you could access the product details from that URL.\n    \n    First extract the product name or URL:\n    - If the input contains \"Product Name: [name]\", use [name] as the product\n    - If the input contains \"Product URL: [url]\", extract the product name from the URL\n    - Otherwise use the entire input as the product name\n    \n    Create a detailed analysis response with:\n    - A 2-3 sentence summary about the product's end-of-life handling for the \"details\" field, mentioning the product by name\n    - A carbon score between 0-100 (higher means higher environmental impact)\n    - Recyclability assessment with overall score and components breakdown specific to this type of product\n    - Common disposal methods with percentages specific to this product type\n    \n    Consider the product type in your analysis:\n    - Electronics contain valuable but difficult to separate materials (metals, plastics, batteries, circuit boards)\n    - Clothing varies by material type (natural fibers are more biodegradable than synthetics)\n    - Furniture components have different recyclability (wood vs metal vs fabric vs plastic)\n    - Food packaging varies widely in recyclability depending on specific materials\n    \n    Product information:\n    {{ productInfo }}\n\n    Respond with a structured analysis following the output format.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Summary Agent Function\nfunction SummaryAgent(productInfo: string) -> SummaryAgentOutput {\n  client \"anthropic/claude-3-5-sonnet-20241022\"\n  prompt #\"\n    You are the Summary Agent providing an overall assessment of a product's environmental impact.\n    \n    The input could be a product name or a URL. If it's a product name, use your knowledge about \n    similar products to make a comprehensive environmental impact assessment. If it's a URL, \n    analyze as if you could access the product details from that URL.\n    \n    First extract the product name or URL:\n    - If the input contains \"Product Name: [name]\", use [name] as the product\n    - If the input contains \"Product URL: [url]\", extract the product name from the URL\n    - Otherwise use the entire input as the product name\n    \n    Create a detailed analysis response with:\n    - A 3-4 sentence summary about the product's overall environmental impact for the \"details\" field, mentioning the product by name\n    - A comprehensive carbon score between 0-100 (higher means higher environmental impact)\n    - Total carbon footprint with breakdown by category specific to this type of product\n    - Key impact areas specific to this product type\n    - Positive sustainability aspects that might exist for this specific product\n    - Consumer recommendations tailored to this product type\n    - Sustainability improvement potential specific to this product\n    - Similar products with better scores (provide realistic alternatives)\n    - Improvement recommendations specific to this product category\n    \n    Consider the product type in your analysis:\n    - Electronics have impacts from materials mining, energy-intensive manufacturing, and e-waste\n    - Clothing has textile production impacts, chemical treatments, and fast fashion issues\n    - Furniture has wood sourcing, manufacturing emissions, but potentially long lifespan\n    - Food/beverages have agricultural, processing, refrigeration, and packaging impacts\n    \n    Product information:\n    {{ productInfo }}\n\n    Respond with a structured analysis following the output format.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test case for materials agent\ntest materials_agent {\n  functions [MaterialsAgent]\n  args {\n    productInfo \"Sample Laptop X1 - 14-inch laptop with aluminum chassis, lithium-ion battery, 16GB RAM, 512GB SSD, manufactured in Taiwan, packaged in cardboard and plastic.\"\n  }\n}\n\n// Test case for manufacturing agent\ntest manufacturing_agent {\n  functions [ManufacturingAgent]\n  args {\n    productInfo \"Sample Laptop X1 - 14-inch laptop with aluminum chassis, lithium-ion battery, 16GB RAM, 512GB SSD, manufactured in Taiwan, packaged in cardboard and plastic.\"\n  }\n}\n\n// Test case for packaging agent\ntest packaging_agent {\n  functions [PackagingAgent]\n  args {\n    productInfo \"Sample Laptop X1 - 14-inch laptop with aluminum chassis, lithium-ion battery, 16GB RAM, 512GB SSD, manufactured in Taiwan, packaged in cardboard and plastic.\"\n  }\n}\n\n// Test case for transport agent\ntest transport_agent {\n  functions [TransportAgent]\n  args {\n    productInfo \"Sample Laptop X1 - 14-inch laptop with aluminum chassis, lithium-ion battery, 16GB RAM, 512GB SSD, manufactured in Taiwan, packaged in cardboard and plastic.\"\n  }\n}\n\n// Test case for lifecycle agent\ntest lifecycle_agent {\n  functions [LifecycleAgent]\n  args {\n    productInfo \"Sample Laptop X1 - 14-inch laptop with aluminum chassis, lithium-ion battery, 16GB RAM, 512GB SSD, manufactured in Taiwan, packaged in cardboard and plastic.\"\n  }\n}\n\n// Test case for end-of-life agent\ntest end_of_life_agent {\n  functions [EndOfLifeAgent]\n  args {\n    productInfo \"Sample Laptop X1 - 14-inch laptop with aluminum chassis, lithium-ion battery, 16GB RAM, 512GB SSD, manufactured in Taiwan, packaged in cardboard and plastic.\"\n  }\n}\n\n// Test case for summary agent\ntest summary_agent {\n  functions [SummaryAgent]\n  args {\n    productInfo \"Sample Laptop X1 - 14-inch laptop with aluminum chassis, lithium-ion battery, 16GB RAM, 512GB SSD, manufactured in Taiwan, packaged in cardboard and plastic.\"\n  }\n}",
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator typescript {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.87.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n\n    // Use ESM format for browser compatibility\n    module_format \"esm\"\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}