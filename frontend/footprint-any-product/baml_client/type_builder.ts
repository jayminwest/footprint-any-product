/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals.js"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    ComponentsBreakdown: ClassViewer<'ComponentsBreakdown', "highlyRecyclable" | "hardToRecycle">;
    
    EndOfLifeAgentOutput: ClassViewer<'EndOfLifeAgentOutput', "details" | "carbonScore" | "recyclability" | "commonDisposalMethods">;
    
    EnergyConsumption: ClassViewer<'EnergyConsumption', "average" | "annualUsage" | "totalLifetimeEnergy" | "averageLifetimeEmissions">;
    
    FootprintContribution: ClassViewer<'FootprintContribution', "score" | "contribution">;
    
    LifecycleAgentOutput: ClassViewer<'LifecycleAgentOutput', "details" | "carbonScore" | "expectedLifespan" | "energyConsumption" | "repairability">;
    
    ManufacturingAgentOutput: ClassViewer<'ManufacturingAgentOutput', "details" | "carbonScore" | "manufacturingLocations">;
    
    ManufacturingLocation: ClassViewer<'ManufacturingLocation', "country" | "city" | "facilityType" | "energySources" | "emissions" | "certifications">;
    
    MaterialInfo: ClassViewer<'MaterialInfo', "name" | "percentage" | "carbonIntensity" | "recyclability" | "sourceInfo">;
    
    MaterialsAgentOutput: ClassViewer<'MaterialsAgentOutput', "details" | "carbonScore" | "materials" | "totalRecyclablePercentage" | "materialsRenewablePercentage">;
    
    PackagingAgentOutput: ClassViewer<'PackagingAgentOutput', "details" | "carbonScore" | "packagingMaterials" | "packagingWeight" | "biodegradablePercentage">;
    
    PackagingMaterial: ClassViewer<'PackagingMaterial', "material" | "percentage" | "recyclability" | "carbonFootprint" | "sourceInfo">;
    
    RecyclabilityInfo: ClassViewer<'RecyclabilityInfo', "overallScore" | "componentsBreakdown">;
    
    Repairability: ClassViewer<'Repairability', "score" | "limitations">;
    
    ShippingRoute: ClassViewer<'ShippingRoute', "origin" | "destination" | "method" | "distance" | "emissionsPerUnit">;
    
    SummaryAgentOutput: ClassViewer<'SummaryAgentOutput', "details" | "carbonScore" | "totalCarbonFootprint" | "keyImpactAreas" | "positiveSustainabilityAspects" | "consumerRecommendation" | "sustainabilityImprovementPotential" | "similarProductsWithBetterScores" | "improvementRecommendations">;
    
    TotalCarbonFootprint: ClassViewer<'TotalCarbonFootprint', "score" | "classification" | "breakdown" | "comparativeRanking">;
    
    TransportAgentOutput: ClassViewer<'TransportAgentOutput', "details" | "carbonScore" | "primaryShippingRoutes" | "totalTransportEmissions">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "ComponentsBreakdown","EndOfLifeAgentOutput","EnergyConsumption","FootprintContribution","LifecycleAgentOutput","ManufacturingAgentOutput","ManufacturingLocation","MaterialInfo","MaterialsAgentOutput","PackagingAgentOutput","PackagingMaterial","RecyclabilityInfo","Repairability","ShippingRoute","SummaryAgentOutput","TotalCarbonFootprint","TransportAgentOutput",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.ComponentsBreakdown = this.tb.classViewer("ComponentsBreakdown", [
          "highlyRecyclable","hardToRecycle",
        ]);
        
        this.EndOfLifeAgentOutput = this.tb.classViewer("EndOfLifeAgentOutput", [
          "details","carbonScore","recyclability","commonDisposalMethods",
        ]);
        
        this.EnergyConsumption = this.tb.classViewer("EnergyConsumption", [
          "average","annualUsage","totalLifetimeEnergy","averageLifetimeEmissions",
        ]);
        
        this.FootprintContribution = this.tb.classViewer("FootprintContribution", [
          "score","contribution",
        ]);
        
        this.LifecycleAgentOutput = this.tb.classViewer("LifecycleAgentOutput", [
          "details","carbonScore","expectedLifespan","energyConsumption","repairability",
        ]);
        
        this.ManufacturingAgentOutput = this.tb.classViewer("ManufacturingAgentOutput", [
          "details","carbonScore","manufacturingLocations",
        ]);
        
        this.ManufacturingLocation = this.tb.classViewer("ManufacturingLocation", [
          "country","city","facilityType","energySources","emissions","certifications",
        ]);
        
        this.MaterialInfo = this.tb.classViewer("MaterialInfo", [
          "name","percentage","carbonIntensity","recyclability","sourceInfo",
        ]);
        
        this.MaterialsAgentOutput = this.tb.classViewer("MaterialsAgentOutput", [
          "details","carbonScore","materials","totalRecyclablePercentage","materialsRenewablePercentage",
        ]);
        
        this.PackagingAgentOutput = this.tb.classViewer("PackagingAgentOutput", [
          "details","carbonScore","packagingMaterials","packagingWeight","biodegradablePercentage",
        ]);
        
        this.PackagingMaterial = this.tb.classViewer("PackagingMaterial", [
          "material","percentage","recyclability","carbonFootprint","sourceInfo",
        ]);
        
        this.RecyclabilityInfo = this.tb.classViewer("RecyclabilityInfo", [
          "overallScore","componentsBreakdown",
        ]);
        
        this.Repairability = this.tb.classViewer("Repairability", [
          "score","limitations",
        ]);
        
        this.ShippingRoute = this.tb.classViewer("ShippingRoute", [
          "origin","destination","method","distance","emissionsPerUnit",
        ]);
        
        this.SummaryAgentOutput = this.tb.classViewer("SummaryAgentOutput", [
          "details","carbonScore","totalCarbonFootprint","keyImpactAreas","positiveSustainabilityAspects","consumerRecommendation","sustainabilityImprovementPotential","similarProductsWithBetterScores","improvementRecommendations",
        ]);
        
        this.TotalCarbonFootprint = this.tb.classViewer("TotalCarbonFootprint", [
          "score","classification","breakdown","comparativeRanking",
        ]);
        
        this.TransportAgentOutput = this.tb.classViewer("TransportAgentOutput", [
          "details","carbonScore","primaryShippingRoutes","totalTransportEmissions",
        ]);
        
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}